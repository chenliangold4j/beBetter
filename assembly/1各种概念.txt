http://c.biancheng.net/asm/
1. 32位寄存器概述（16个）：
    4个数据（通用）寄存器：(EAX、EBX、ECX、EDX)。
    6个段寄存器：（ES、CS、SS、DS、FS、GS）。
    2个变址寄存器：（ESI、EDI）。
    2个指针寄存器（ESP、EBP）。
    1个指令指针寄存器：EIP。
    1个标志寄存器:  EFlags。

2.64位寄存器分配的不同
    64位有16个寄存器，32位只有8个。但是32位前8个都有不同的命名，分别是e _ ，而64位前8个使用了r代替e，也就是r _。e开头的寄存器命名依然可以直接运用于相应寄存器的低32位。
    而剩下的寄存器名则是从r8 - r15，其低位分别用d，w,b指定长度。
    32位使用栈帧来作为传递的参数的保存位置，而64位使用寄存器，分别用rdi,rsi,rdx,rcx,r8,r9作为第1-6个参数。rax作为返回值
    64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，rbp作为通用寄存器使用
    64位支持一些形式的以PC相关的寻址，而32位只有在jmp的时候才会用到这种寻址方式。

3.间接寻址
    直接寻址很少用于数组处理，因为，用常数偏移量来寻址多个数组元素时，直接寻址不实用。反之，会用寄存器作为指针（称为间接寻址）并控制该寄存器的值。
    如果一个操作数使用的是间接寻址，就称之为间接操作数。

    间接操作数：
        保护模式
        任何一个 32 位通用寄存器（EAX、EBX、ECX、EDX、ESI、EDI、EBP 和 ESP）加上括号就能构成一个间接操作数。

        寄存器中存放的是数据的地址。示例如下，ESI 存放的是 byteVal 的偏移量，MOV 指令使用间接操作数作为源操作数，
        解析 ESI 中的偏移量，并将一个字节送入 AL：
        .data
        byteVal BYTE 10h
        .code
        mov esi,OFFSET byteVal
        mov al,[esi]                              ; AL = 10h
        如果目的操作数也是间接操作数，那么新值将存入由寄存器提供地址的内存位置。在下面的例子中，BL 寄存器的内容复制到 ESI 寻址的内存地址中：
        mov [esi],bl

        如果目的操作数也是间接操作数，那么新值将存入由寄存器提供地址的内存位置。在下面的例子中，BL 寄存器的内容复制到 ESI 寻址的内存地址中：
        mov [esi],bl
        PTR 与间接操作数一起使用
        一个操作数的大小可能无法从指令中直接看出来。下面的指令会导致汇编器产生“operand must have size（操作数必须有大小）”的错误信息：
        inc [esi]    ;错误：operand must have size
        汇编器不知道 ESI 指针的类型是字节、字、双字，还是其他的类型。而 PTR 运算符则可以确定操作数的大小类型：
        inc BYTE PTR [esi]

    数组
        间接操作数是步进遍历数组的理想工具。下例中，arrayB 有 3 个字节，随着 ESI 不断加 1，它就能顺序指向每一个字节：
        .data
        arrayB BYTE 10h,20h,30h
        .code
        mov esi,OFFSET arrayB
        mov alz [esi]                        ;AL = lOh
        inc esi
        mov al, [esi]                        ;AL = 20h
        inc esi
        mov al, [esi]                        ;AL = 30h
        如果数组是 16 位整数类型，则 ESI 加 2 就可以顺序寻址每个数组元素：
        .data
        arrayW WORD 1000h,2000h,3000h
        .code
        mov esi,OFFSET arrayW
        mov ax,[esi]                         ; AX = 1000h
        add esi, 2
        mov ax,[esi]                         ; AX = 2000h
        add esi, 2
        mov axz [esi]                        ; AX = 3000h
        示例：32 位整数相加下面的代码示例实现的是 3 个双字相加。由于双字是 4 个字节的，因此，ESI 要加 4 才能顺序指向每个数组数值：
        .data
        arrayD DWORD 10000h,20000h,30000h
        .code
        mov esi,OFFSET arrayD
        mov eax, [esi]                  ;（第一个数）
        add esi, 4
        add eax, [esi]                   ;（第二个数）
        add esi, 4
        add eax, [esi]                   ;（第三个数）
    变址操作数
        变址操作数是指，在寄存器上加上常数产生一个有效地址。每个 32 位通用寄存器都可以用作变址寄存器。MASM 可以用不同的符号来表示变址操作数（括号是表示符号的一部分）：
        constant [reg]
        [constant + reg]
        第一种形式是变量名加上寄存器。变量名由汇编器转换为常数，代表的是该变量的偏移量。下面给岀的是两种符号形式的例子：

        arrayB[esi]	[arrayB + esi]
        arrayD[ebx]	[arrayD + ebx]
        变址操作数非常适合于数组处理。在访问第一个数组元素之前，变址寄存器需要初始化为 0：
        .data
        arrayB BYTE 10h,20h,30h
        .code
        mov esi, 0
        mov al, arrayB[esi]                ; AL = 10h
        最后一条语句将 ESI 和 arrayB 的偏移量相加，表达式 [arrayB+ESI] 产生的地址被解析，并将相应内存字节的内容复制到AL。

        增加位移量变址寻址的第二种形式是寄存器加上常数偏移量。变址寄存器保存数组或结构的基址，常数标识各个数组元素的偏移量。下例展示了在一个 16 位字数组中如何使用这种形式：
        .data
        arrayW WORD 1000h,2000h,3000h
        .code
        mov esi,OFFSET arrayW
        mov ax, [esi]                   ;AX = 1000h
        mov ax, [esi+2]                 ;AX = 2000h
        mov ax, [esi+4]                 ;AX = 3000h
        使用 16 位寄存器
        在实地址模式中，一般用 16 位寄存器作为变址操作数。在这种情况下，能被使用的寄存器只有 SI、DI、BX 和 BP：
        mov al,arrayB[si]
        mov ax,arrayW[di]
        mov eax,arrayD[bx]
        如果有间接操作数，则要避免使用 BP 寄存器，除非是寻址堆栈数据。
        变址操作数中的比例因子
        在计算偏移量时，变址操作数必须考虑每个数组元素的大小。比如下例中的双字数组，下标（3 ）要乘以 4（一个双字的大小）才能生成内容为 400h 的数组元素的偏移量：
        .data
        arrayD DWORD 100h, 200h, 300h, 400h
        .code
        mov esi , 3 * TYPE arrayD                            ; arrayD [ 3 ]的偏移量
        mov eax,arrayD[esi]                                  ; EAX = 400h
        Intel 设计师希望能让编译器编写者的常用操作更容易，因此，他们提供了一种计算偏移量的方法，即使用比例因子。比例因子是数组元素的大小（字 = 2，双字 =4，四字 =8）。
        现在对刚才的例子进行修改，将数组下标（3）送入 ESI，然后 ESI 乘以双字的比例因子（4）：
        .data
        arrayD DWORD 1,2,3,4
        .code 
        mov esi, 3                               ;下标
        mov eax,arrayD[esi*4]                    ;EAX = 4
        TYPE 运算符能让变址更加灵活，它可以让 arrayD 在以后重新定义为别的类型：
        mov esi, 3                         ;下标 
        mov eax,arrayD[esi*TYPE arrayD]    ;EAX = 4

    指针
        如果一个变量包含另一个变量的地址，则该变量称为指针。指针是控制数组和数据结构的重要工具，因为，它包含的地址在运行时是可以修改的。
        比如，可以使用系统调用来分配（保留）一个内存块，再把这个块的地址保存在一个变量中。

        指针的大小受处理器当前模式（32位或64位）的影响。下例为 32 位的代码，ptrB 包含了 arrayB 的偏移量：
        .data
        arrayB byte 10h,20h,30h,40h
        ptrB dword arrayB
        还可以用 OFFSET 运算符来定义 ptrB，从而使得这种关系更加明确：
        ptrB dword OFFSET arrayB
        32 位模式程序使用的是近指针，因此，它们保存在双字变量中。这里有两个例子：ptrB 包含 arrayB 的偏移量，ptrW 包含 arrayW 的偏移量：
        arrayB BYTE 10h,20h,30h,40h
        arrayW WORD 1000h,2000h,3000h
        ptrB    DWORD arrayB
        ptrW    DWORD arrayW
        同样，也还可以用 OFFSET 运算符使这种关系更加明确：
        ptrB DWORD OFFSET arrayB
        ptrW DWORD OFFSET arrayW
        高级语言刻意隐藏了指针的物理细节，这是因为机器结构不同，指针的实现也有差异。汇编语言中，由于面对的是单一实现，因此是在物理层上检查和使用指针。这样有助于消除围绕着指针的一些神秘感。
        
        使用 TYPEDEF 运算符
        TYPEDEF 运算符可以创建用户定义类型，这些类型包含了定义变量时内置类型的所有状态。它是创建指针变量的理想工具。比如，下面声明创建的一个新数据类型 PBYTE 就是一个字节指针：
        PBYTE TYPEDEF PTR BYTE
        这个声明通常放在靠近程序开始的地方，在数据段之前。然后，变量就可以用 PBYTE 来定义：
        .data
        arrayB BYTE 10h,20h,30h,40h
        ptr1 PBYTE ?                              ;未初始化
        ptr2 PBYTE arrayB                     ;指向一个数组

    示例程序
        TITLE Pointers            (Pointers.asm)
        .386
        .model flat,stdcall
        .stack 4096
        ExitProcess proto,dwExitCode:dword
        ;创建用户定义类型
        PBYTE TYPEDEF PTR BYTE                ;字节指针
        PWORD TYPEDEF PTR WORD                ;字指针
        PDWORD TYPEDEF PTR DWORD            ;双字指针

        .data
        arrayB BYTE 10h,20h,30h
        arrayW WORD 1,2,3
        arrayD DWORD 4,5,6
        ;创建几个指针变量
        ptr1 PBYTE arrayB
        ptr2 PWORD arrayW
        ptr3 PDWORD arrayD

        .code
        main PROC
        ;使用指针访问数据
            mov esi,ptr1
            mov al,[esi]                    ;10h
            mov esi,ptr2
            mov ax,[esi]                    ;1
            mov esi,ptr3
            mov eax,[esi]                    ;4
            invoke ExitProcess,0
        main ENDP
        END main
4.运行时堆栈
    运行时堆栈是内存数组，CPU 用 ESP（扩展堆栈指针，extended stack pointer）寄存器对其进行直接管理，该寄存器被称为堆栈指针寄存器（stack pointer register）。

    32位模式下，ESP 寄存器存放的是堆栈中某个位置的 32 位偏移量。
    ESP 基本上不会直接被程序员控制，反之，它是用 CALL、RET、PUSH 和 POP 等指令间接进行修改。

    运行时堆栈在程序中有一些重要用途：
        当寄存器用于多个目的时，堆栈可以作为寄存器的一个方便的临时保存区。在寄存器被修改后，还可以恢复其初始值。
        执行 CALL 指令时，CPU 在堆栈中保存当前过程的返回地址。
        调用过程时，输入数值也被称为参数，通过将其压入堆栈实现参数传递。
        堆栈也为过程局部变量提供了临时存储区域。        

5.链接库
    链接库是一种文件，包含了已经汇编为机器代码的过程（子程序）。链接库开始时是一个或多个源文件，这些文件再被汇编为目标文件。目标文件插入到一个特殊格式文件，该文件由链接器工具识别。

    假设一个程序调用过程 WriteString 在控制台窗口显示一个字符串。该程序源代码必须包含 PROTO 伪指令来标识 WriteString 过程：
    WriteString proto

    之后，CALL 指令执行 WriteString：
    call WriteString

    当程序进行汇编时，汇编器将不指定 CALL 指令的目标地址，它知道这个地址将由链接器指定。链接器在链接库中寻找 WriteString，并把库中适当的机器指令复制到程序的可执行文件中。同时，它把 WriteString 的地址插入到 CALL 指令。

    如果被调用过程不在链接库中，链接器就发出错误信息，且不会生成可执行文件。


    链接命令选项
        链接器工具把一个程序的目标文件与一个或多个目标文件以及链接库组合在一起。比如，下述命令就将 hello.obj 与 irvine32.lib 和 kernel32.lib 库链接起来：
        link hello.obj irvine32.lib kernel32.lib

6.标志位
    一、运算结果标志位
    1、进位标志CF(Carry Flag)
    进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。

    使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。

    2、奇偶标志PF(Parity Flag)

    奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。

    利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。

    3、辅助进位标志AF(Auxiliary Carry Flag)
    在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：

    (1)、在字操作时，发生低字节向高字节进位或借位时；
    (2)、在字节操作时，发生低4位向高4位进位或借位时。

    对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。

    4、零标志ZF(Zero Flag)
    零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。

    5、符号标志SF(Sign Flag)

    符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。

    6、溢出标志OF(Overflow Flag)

    溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。

    “溢出”和“进位”是两个不同含义的概念，不要混淆。如果不太清楚的话，请查阅《计算机组成原理》课程中的有关章节。

    二、状态控制标志位

    状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。

    1、追踪标志TF(Trap Flag)

    当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。

    指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。

    2、中断允许标志IF(Interrupt-enable Flag)

    中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：

    (1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；

    (2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。

    CPU的指令系统中也有专门的指令来改变标志位IF的值。

    3、方向标志DF(Direction Flag)

    方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。具体规定在第5.2.11节——字符串操作指令——中给出。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。

    三、32位标志寄存器增加的标志位

    1、I/O特权标志IOPL(I/O Privilege Level)

    I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。

    2、嵌套任务标志NT(Nested Task)

    嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：

    (1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；

    (2)、当NT=1，通过任务转换实现中断返回。

    3、重启动标志RF(Restart Flag)

    重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。

5.过程嵌套调用：
       .data
        theSum DWORD ?
        .code
        main PROC
        mov eax, 10000h          ;参数
        mov ebx, 20000h          ;参数
        mov ecx, 30000h          ;参数
        call Sumof               ;EAX=(EAX+EEX+ECX)
        mov theSum,eax           ;保存和数
