1.堆栈
    多年以来，Microsoft 在 32 位程序中包含了一种参数传递规则，称为 fastcall。如同这个名字所暗示的，只需简单地在调用子程序之前把参数送入寄存器，就可以将运行效率提高一些。
    相反，如果把参数压入堆栈，则执行速度就要更慢一点。

    典型用于参数的寄存器包括 EAX、EBX、ECX 和 EDX，少数情况下，还会使用 EDI 和 ESI。可惜的是，这些寄存器在用于存放数据的同时，还用于存放循环计数值以及参与计算的操作数。


2.esp ebp
    esp是栈指针，是cpu机制决定的，push、pop指令会自动调整esp的值；

    ebp只是存取某时刻的esp，这个时刻就是进入一个函数内后，cpu会将esp的值赋给ebp，此时就可以通过ebp对栈进行操作，比如获取函数参数，局部变量等，实际上使用esp也可以；

    既然使用esp也可以，那么为什么要设定ebp呢？

    答案是为了方便程序员。

    因为esp在函数运行时会不断的变化，所以保存一个一进入某个函数的esp到ebp中会方便程序员访问参数和局部变量，而且还方便调试器分析函数调用过程中的堆栈情况。
    前面说了，这个ebp不是必须要有的，你非要使用esp来访问函数参数和局部变量也是可行的，只不过这样会麻烦一些。   
3.LEA 指令
    LEA 指令返回间接操作数的地址。
    现在来看下面的 C++ 程序，该程序声明了一个局部数组 myString，并引用它来分配数组值：
    void makeArray()
    {
        char myString[30];
        for ( int i = 0; i < 30; i++ )
            myString[i] = '*';
    }
    与之等效的汇编代码在堆栈中为 myString 分配空间，并将地址（间接操作数）赋给 ESI。虽然数组只有 30 个字节，但是 ESP 还是递减了 32 以对齐双字边界。注意如何使用 LEA 把数组地址分配给 ESI：
    纯文本复制
    makeArray PROC
        push ebp
        mov ebp,esp
        sub esp, 32            ;myString 位于 EBP-30 的位置
        lea esi, [ebp-30]      ;加载 myString 的地址
        mov ecx, 30            ;循环计数器
    LI: mov BYTE PTR [esi]     ;填充一个位置
        inc esi                ;指向下一个元素
        loop LI                ;循环，直到 ECX=0
        add esp, 32            ;删除数组(恢复ESP)
        pop ebp
        ret
    makeArray ENDP
    不能用 OFFSET 获得堆栈参数的地址，因为 OFFSET 只适用于编译时已知的地址。下面的语句无法汇编：
    mov esi,OFFSET [ebp-30 ]    ;错误

4.ENTER和LEAVE指令
    ENTER 指令为被调用过程自动创建堆栈帧。它为局部变量保留堆栈空间，把 EBP 入栈。具体来说，它执行三个操作：
    把 EBP 入栈 (push ebp)
    把 EBP 设置为堆栈帧的基址 (mov ebp, esp)
    为局部变量保留空间 (sub esp, numbytes)

    LEAVE 指令结束一个过程的堆栈帧。它反转了之前的 ENTER 指令操作：恢复了过程被调用时 ESP 和 EBP 的值。再次以 MySub 过程为例，现在可以编码如下：
    MySub PROC
        enter 8,0
        .
        .
        leave
        ret
    MySub ENDP

    下面是与之等效的指令序列，其功能是在堆栈中保存和删除 8 个字节的局部变量：
    MySub PROC
        push ebp
        mov ebp, esp
        sub esp, 8
        .
        .
        mov esp, ebp
        pop ebp
        ret
    MySub ENDP

5.string primitives
    x86 指令集有五组指令用于处理字节、字和双字数组。虽然它们被称为字符串原语 (string primitives)，但它们并不局限于字符数组。32 位模式中，
    下表中的每条指令都隐含使用 ESI、EDI，或是同时使用这两个寄存器来寻址内存。

    指令	                 说明
    MOVSB、MOVSW、MOVSD  	传送字符串数据：将 ESI 寻址的内存数据复制到 EDI 寻址的内存位置
    CMPSB、CMPSW、CMPSD	    比较字符串：比较分别由 ESI 和 EDI 寻址的内存数据
    SCASB、SCASW、SCASD	    扫描字符串：比较累加器 (AL、AX 或 EAX) 与 EDI 寻址的内存数据
    STOSB、STOSW、STOSD  	保存字符串数据：将累加器内容保存到 EDI 寻址的内存位置
    LODSB、LODSW、LODSD  	从字符串加载到累加器：将 ESI 寻址的内存数据加载到累加器

    根据指令数据大小，对累加器的引用隐含使用 AL、AX 或 EAX。字符串原语能高效执行，因为它们会自动重复并增加数组索引。

    使用重复前缀
    就其自身而言，字符串基本指令只能处理一个或一对内存数值。如果加上重复前缀，指令就可以用 ECX 作计数器重复执行。重复前缀使得单条指令能够处理整个数组。下面为可用的重复前缀：

    REP	ECX > 0 时重复
    REPZ、REPE	零标志位置 1 且 ECX > 0 时重复
    REPNZ、REPNE	零标志位清零且 ECX > 0 时重复
    【示例】复制字符串：下面的例子中，MOVSB 从 string1 传送 10 个字节到 string2。重复前缀在执行 MOVSB 指令之前，首先测试 ECX 是否大于 0。若 ECX=0，MOVSB 指令被忽略，控制传递到程序的下一行代码；若 ECX>0，则 ECX 减 1 并重复执行 MOVSB 指令：
    cld                                              ;清除方向标志位
    mov esi, OFFSET string1            ; ESI 指向源串
    mov edi, OFFSET string2           ; EDI 执行目的串
    mov ecx, 10                               ;计数器赋值为10
    rep movsb                                 ;传送io个字节

    重复 MOVSB 指令时，ESI 和 EDI 自动增加，这个操作由 CPU 的方向标志位控制。

    方向标志位
    根据方向标志位的状态，字符串基本青令增加或减少 ESI 和 EDI 如下表所示。可以用 CLD 和 STD 指令显式修改方向标志位：
    CLD ;方向标志位清零（正向）
    STD ;方向标志位置 1（反向）

6.MOVSB、MOVSW 和 MOVSD 指令将数据从 ESI 指向的内存位置复制到 EDI 指向的内存位置。（根据方向标志位的值）这两个寄存器自动地增加或减少：

    指令 	ESI 和 EDI 增加或减少的数值
    MOVSB	1
    MOVSW	2
    MOVSD	4

7.CMPSB、CMPSW 和 CMPSD 指令比较 ESI 指向的内存操作数与 EDI 指向的内存操作数：

    CMPSB	比较字节
    CMPSW	比较字
    CMPSD	比较双字

8.SCASB、SCASW 和 SCASD 指令分别将 AL/AX/EAX 中的值与 EDI 寻址的一个字节 / 字 / 双字进行比较。这些指令可用于在字符串或数组中寻找一个数值。结合 REPE（或 REPZ）前缀，当 ECX > 0 且 AL/AX/EAX 的值等于内存中每个连续的值时，不断扫描字符串或数组。


    REPNE 前缀也能实现扫描，直到 AL/AX/EAX 与某个内存数值相等或者 ECX = 0。

9.STOSB、STOSW 和 STOSD 指令分别将 AL/AX/EAX 的内容存入由 EDI 中偏移量指向的内存位置。EDI 根据方向标志位的状态递增或递减。

10.LODSB、LODSW 和 LODSD 指令分别从 ESI 指向的内存地址加载一个字节或一个字到 AL/AX/EAX。ESI 按照方向标志位的状态递增或递减。

11.
