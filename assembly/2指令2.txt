1.AND 指令
    AND 指令在两个操作数的对应位之间进行（按位）逻辑与（AND）操作，并将结果存放在目标操作数中：
    AND destination,source

    如，设 AL 初始化为二进制数 1010 1110，将其与 1111 0110 进行 AND 操作后，AL 等于 1010 0110：
    mov al,10101110b
    and al, 11110110b    ;AL 中的结果 = 1010 0110

    标志位
        AND 指令总是清除溢出和进位标志位，并根据目标操作数的值来修改符号标志位、零标志位和奇偶标志位。
        比如，下面指令的结果存放在 EAX 寄存器，假设其值为 0。在这种情况下，零标志位就会置 1：
        and eax,1Fh

2.OR
    OR 指令在两个操作数的对应位之间进行（按位）逻辑或（OR）操作，并将结果存放在目标操作数中：
    OR destination, source

    OR 指令总是清除进位和溢出标志位，并根据目标操作数的值来修改符号标志位、零标志位和奇偶标志位。比如，可以将一个数与它自身（或 0）进行 OR 运算，来获取该数值的某些信息：
    or al,al

    下表给出了零标志位和符号标志位对 AL 内容的说明：

    零标志位	符号标志位	AL 中的值
    清0	         清0	     大于0
    置1	         清0	     等于0
    清0        	 置1	     小于0

3.XOR 
    指令在两个操作数的对应位之间进行（按位）逻辑异或（XOR）操作，并将结果存放在目标操作数中：
    XOR destination, source

    标志位
    XOR 指令总是清除溢岀和进位标志位，并根据目标操作数的值来修改符号标志位、零标志位和奇偶标志位。
    检查奇偶标志
    奇偶检查是在一个二进制数上实现的功能，计算该数中 1 的个数；如果计算结果为偶数，则说该数是偶校验；如果结果为奇数，则该数为奇校验。

    x86 处理器中，当按位操作或算术操作的目标操作数最低字节为偶校验时，奇偶标志位置 1。反之，如果操作数为奇校验，则奇偶标志位清 0。一个既能检查数的奇偶性，又不会修改其数值的有效方法是，将该数与 0 进行异或运算：
    mov al,10110101b              ;5 个 1,奇校验
    xor al, 0                               ;奇偶标志位清 0 （奇）
    mov al, 11001100b             ;4 个 1，偶校验
    xor al, 0                               ;奇偶标志位置 1（偶）

    Visual Studio 用 PE=1 表示偶校验，PE=0 表示奇校验。

4.NOT 指令
    例如，F0h 的反码是 0Fh：
    mov al,11110000b
    not al                          ;AL = 00001111b

5.TEST 
    指令在两个操作数的对应位之间进行 AND 操作，并根据运算结果设置符号标志位、零标志位和奇偶标志位。
    TEST 指令与《AND指令》一节中介绍的 AND 指令唯一不同的地方是，TEST 指令不修改目标操作数。TEST 指令允许的操作数组合与 AND 指令相同。在发现操作数中单个位是否置位时，TEST 指令非常有用。
    示例：多位测试
    TEST 指令同时能够检查几个位。假设想要知道 AL 寄存器的位 0 和位 3 是否置 1，可以使用如下指令：
    test al, 00001001b ;测试位 0 和位 3

    （本例中的 0000 1001 称为位掩码。）从下面的数据集例子中，可以推断只有当所有测试位都清 0 时，零标志位才置 1：
    0  0  1  0  0  1  0  1    <- 输入值
    0  0  0  0  1  0  0  1    <- 测试值
    0  0  0  0  0  0  0  1    <- 结果：ZF=0

    0  0  1  0  0  1  0  0    <- 输入值
    0  0  0  0  1  0  0  1    <- 测试值
    0  0  0  0  0  0  0  0    <- 结果：ZF=1


6.CMP（比较）指令
    CMP（比较）指令执行从目的操作数中减去源操作数的隐含减法操作，并且不修改任何操作数：
    CMP destination,source

    当实际的减法发生时，CMP 指令按照计算结果修改溢出、符号、零、进位、辅助进位和奇偶标志位

    下面用三段代码来说明标志位是如何受到 CMP 影响的。设 AX=5，并与 10 进行比较，则进位标志位将置 1，原因是（5-10）需要借位：
    mov ax, 5
    cmp ax,10     ; ZF = 0 and CF = 1

    1000 与 1000 比较会将零标志位置 1，因为目标操作数减去源操作数等于 0：
    mov ax,1000
    mov cx,1000
    cmp cx, ax        ;ZF = 1 and CF = 0

    105 与 0 进行比较会清除零和进位标志位，因为（105-0）的结果是一个非零的正整数。
    mov si,105
    cmp si, 0        ; ZF = 0 and CF = 0


7.修改标志位
    怎样能方便地置位和清除零标志位、符号标志位、进位标志位和溢出标志位？有几种方法，其中的一些需要修改目标操作数。要将零标志位置 1，就把操作数与 0 进行 TEST 或 AND 操作；
    要将零标志位清零，就把操作数与 1 进行 OR 操作：
    test al, 0           ;零标志位置 1
    and al, 0           ;零标志位置 1
    or al, 1              ;零标志位清零

    TEST 指令不修改目的操作数，而 AND 指令则会修改目的操作数。若要符号标志位置 1，将操作数的最高位和 1 进行 OR 操作；若要清除符号标志位，则将操作数最高位和 0 进行 AND 操作：
    or al, 80h         ;符号标志位置 1
    and al, 7Fh       ;符号标志位清零

    若要进位标志位置 1，用 STC 指令；清除进位标志位，用 CLC 指令：
    stc                   ;进位标志位置 1
    clc                   ;进位标志位清零

    若要溢出标志位置 1，就把两个正数相加使之产生负的和数；若要清除溢出标志位，则将操作数和 0 进行 OR 操作：
    mov al,7Fh       ; AL = +127
    inc al                ; AL = 80h (-128), OF=1
    or eax, 0           ; 溢出标志位清零

8.条件跳转
    执行一个条件语句需要两个步骤：
    第一步，用 CMP、AND 或 SUB 操作来修改 CPU 状态标志位；
    第二步，用条件跳转指令来测试标志位，并产生一个到新地址的分支。

    【示例 1】本例中的 CMP 指令把 EAX 的值与 0 进行比较，如果该指令将零标志位置 1，则 JZ（为零跳转）指令就跳转到标号 L1：
        cmp eax, 0
        jz L1                   ;如果 ZF=1 则跳转
        .
        .
        L1：

        【示例 2】本例中的 AND 指令对 DL 寄存器进行按位与操作，并影响零标志位。如果零标志位清零，则 JNZ（非零跳转）指令跳转：
                and dl,10110000b
                jnz L2                         ;如果 ZF=0 则跳转
                .
                .
        L2 :


    Jcond 指令
        当状态标志条件为真时，条件跳转指令就分支到目标标号。否则，当标志位条件为假时，立即执行条件跳转后面的指令。语法如下所示：
        Jcond destination

        cond 是指确定一个或多个标志位状态的标志位条件。下面是基于进位和零标志位的例子：

        JC	进位跳转（进位标志位置 1）
        JNC	无进位跳转（进位标志位清零）
        JZ	为零跳转（零标志位置 1）
        JNZ	非零跳转（零标志位清零）
        CPU 状态标志位最常见的设置方法是通过算术运算、比较和布尔运算指令。条件跳转指令评估标志位状态，利用它们来决定是否发生跳转。    


    用 CMP 指令 假设当 EAX=5 时，跳转到标号 L1。在下面的例子中，如果 EAX=5，CMP 指令就将零标志位置 1；之后，由于零标志位为 1，JE 指令就跳转到 L1：
    cmp eax,5
    je L1                  ;如果相等则跳转

    JE 指令总是按照零标志位的值进行跳转。如果 EAX 不等于 5，CMP 就会清除零标志位，那么，JE 指令将不跳转。

    下例中，由于 AX 小于 6，所以 JL 指令跳转到标号 L1：
    mov ax, 5
    cmp ax, 6
    jl L1                 ;小于则跳转

    下例中，由于 AX 大于4，所以发生跳转：
    mov ax,5
    cmp ax,4
    jg L1              ;大于则跳转    

    其他类似的跳转指令

    1.相等性的比较

    助记符	说明	标志位/寄存器	助记符	说明	标志位/寄存器
    JZ	为零跳转	ZF=1	JNO	无溢出跳转	OF=0
    JNZ	非零跳转	ZF=0	JS	有符号跳转	SF=1
    JC	进位跳转	CF=1	JNS	无符号跳转	SF=0
    JNC	无进位跳转	CF=0	JP	偶校验跳转	PF=1
    JO	溢出跳转	OF=1	JNP	奇校验跳转	PF=0

    助记符	说明
    JE	相等跳转 (leftOp=rightOp)
    JNE	不相等跳转 (leftOp M rightOp)
    JCXZ	CX=0 跳转
    JECXZ	ECX=0 跳转
    JRCXZ	RCX=0 跳转（64 位模式）

    2.无符号数比较

    助记符	说明	助记符	说明
    JA	大于跳转（若 leftOp > rightOp）	JB	小于跳转（若 leftOp < rightOp）
    JNBE	不小于或等于跳转（与 JA 相同）	JNAE	不大于或等于跳转（与 JB 相同）
    JAE	大于或等于跳转（若 leftOp ≥ rightOp）	JBE	小于或等于跳转（若 leftOp ≤ rightOp）
    JNB	不小于跳转（与 JAE 相同）	JNA	不大于跳转（与 JBE 相同）

    3.有符号数比较
    助记符	说明	助记符	说明
    JG	大于跳转（若 leftOp > rightOp）	JL	小于跳转（若 leftOp < rightOp）
    JNLE	不小于或等于跳转（与 JG 相同）	JNGE	不大于或等于跳转（与 JL 相同）
    JGE	大于或等于跳转（若 leftOp ≥ rightOp）	JLE	小于或等于跳转（若 leftOp ≤ rightOp）
    JNL	不小于跳转（与 JGE 相同）	JNG	不大于跳转（与 JLE 相同）

    
9.LOOPZ LOOPE LOOPNZ LOOPNE
    LOOPZ（为零跳转）指令的工作和 LOOP 指令相同，只是有一个附加条件：为零控制转向目的标号，零标志位必须置 1。指令语法如下：
    LOOPZ destination

    LOOPE（相等跳转）指令相当于 LOOPZ 它们有相同的操作码。这两条指令执行如下任务：
    ECX = ECX - 1
    if ECX > 0 and ZF = 1, jump to destination

    否则，不发生跳转，并将控制传递到下一条指令。LOOPZ 和 LOOPE 不影响任何状态标志位。32 位模式下，ECX 是循环计数器；64 位模式下，RCX 是循环计数器。

    LOOPNZ（非零跳转）指令与 LOOPZ 相对应。当 ECX 中无符号数值大于零（减 1 操作之后）且零标志位等于零时，继续循环。指令语法如下：
    LOOPNZ destination

    LOOPNE（不等跳转）指令相当于 LOOPNZ 它们有相同的操作码。这两条指令执行如 下任务：
    ECX = ECX - 1
    if ECX > 0 and ZF = 0, jump to destination

    否则，不发生跳转，并将控制传递到下一条指令。

10.示例：
    .data
    array  SWORD  -3,-6,-1,-10,10,30,40,4
    sentinel SWORD  0

    .code
    main PROC
    mov esi,OFFSET array
    mov ecx,LENGTHOF array

    next:
    test WORD PTR [esi],8000h    ; 测试符号位
    pushfd                       ; 标志位入栈
    add  esi,TYPE array          ; 移动到下一个位置
    popfd                        ; 标志位出栈
    loopnz next                  ; 继续循环
    jnz  quit                    ; 没有发现非负数
    sub  esi,TYPE array          ; ESI 指向数值
    quit:

11.汇编IF
    在汇编语言中，这种 IF 语句转换为条件跳转和 CMP 指令。
    下面实现 IF 语句的程序是高效的，当逻辑表达式为真时，它允许代码“通过”直达两条期望被执行的 MOV 指令：
        mov eax, op1
        cmp eax,op2                  ; op1 == op2?
        jne L1                       ; 否：跳过后续指令
        mov X, 1                     ; 是：X, Y 赋值
        mov Y, 2
    L1:
    如果用 JE 来实现 == 运算符，生成的代码就没有那么紧凑了（6 条指令，而非 5 条指令）：
            mov    eax, op1
            cmp    eax,op2              ; op1 == op2?
            je    L1                    ; 是：跳转到 L1
            jmp    L2                   ; 否：跳过赋值语句
    LI：    mov X, 1                    ; X, Y 赋值
            mov    Y, 2
    L2 :
    从上面的例子可以看出，相同的条件结构在汇编语言中有多种实现方法。上面给出 的编译代码示例只代表一种假想的编译器可能产生的结果。


12.汇编逻辑表达
    1.AND
    汇编语言很容易实现包含 AND 运算符的复合布尔表达式。考虑下面的伪代码，假设其中进行比较的是无符号整数：
    if (a1 > b1) AND (b1 > c1)
        X = 1
    end if

    短路求值
    下面的例子是短路求值的简单实现，如果第一个表达式为假，则不需计算第二个表达式。高级语言的规范如下：
            cmp a1,b1                  ;第一个表达式…
            ja L1
            jmp next
    L1:     cmp b1, c1                 ;第二个表达式…
            ja L2
            jmp next
    L2:   mov X, 1                     ;全为真：将 X 置 1
    next:
    如果把第一条 JA 指令替换为 JBE，就可以把代码减少到 5 条：
    纯文本复制
            cmp    a1,b1                  ; 第一个表达式…
            jbe next                      ; 如果假，则退出
            cmp    b1,c1                  ; 第二个表达式…
            jbe next                      ; 如果假，则退出
            mov    X, 1                   ; 全为真
    next:
    若第一个 JBE 不执行，CPU 可以直接执行第二个 CMP 指令，这样就能够减少 29% 的代码量（指令数从 7 条减少到 5 条）。


    2.OR
    当复合表达式包含的子表达式是用 OR 运算符连接的，那么只要一个子表达式为真，则整个复合表达式就为真。以如下伪代码为例：
    if (a1 > b1) OR (b1 > c1)
        X = 1

    在下面的实现过程中，如果第一个表达式为真，则代码分支到 L1；否则代码直接执行第二个 CMP 指令。第二个表达式翻转了 > 运算符，并使用了 JBE 指令：
            cmp a1, b1                  ; 1：比较 AL 和 BL
            ja L1                       ; 如果真，跳过第二个表达式
            cmp b1, c1                  ; 2：比较 BL 和 CL
            jbe next                    ; 假：跳过下一条语句
    L1:     mov X, 1                    ; 真：将 x 置 1
    next:
    对于一个给定的复合表达式而言，汇编语句有多种实现方法。

13.汇编while
    用汇编语言实现这个结构时，可以很方便地改变循环条件，当条件为真时，跳转到 endwhile。假设 val1 和 val2 都是变量，那么在循环开始之前必须将其中的一个变量送入寄存器，并且还要在最后恢复该变量的值：
            mov eax, val1                  ; 把变量复制到 EAX
    beginwhile:
            cmp eax, val2                  ; 如果非 val1 < val2
            jnl     endwhile               ; 退出循环
            inc    eax                     ; val1++;
            dec    val2                    ; val2--;
            jmp    beginwhile              ; 重复循环
    endwhile:
            mov    val1, eax                ;保存 val1 的新值
    在循环内部，EAX 是 val1 的代理（替代品），对 val1 的引用必须要通过 EAX。JNL 的使用意味着 val1 和 val2 是有符号整数。
14.示例：if家while
    c++
    int array[] = {10,60,20,33,72,89,45,65,72,18};
    int sample  =  50;
    int ArraySize = sizeof array / sizeof sample;
    int index = 0;
    int sum  =  0;
    while( index < ArraySize )
    {
        if( array[index] > sample )
        {
            sum += array[index];
        }
        index++;
    }

    汇编
    array DWORD 10,60,20,33,72,89,45,65,72,18
    ArraySize = ($ - Array) / TYPE array

    .code
    main PROC
        mov    eax,0                           ; 求和
        mov    edx,sample
        mov    esi,0                           ; 索引
        mov    ecx,ArraySize

    L1: cmp    esi,ecx                         ; 如果 esi < ecx
        jl    L2
        jmp    L5

    L2: cmp    array[esi*4], edx               ; 如果array[esi] > edx
        jg    L3
        jmp    L4
    L3: add    eax,array[esi*4]

    L4: inc    esi
        jmp    L1

    L5: mov    sum,eax

16.表驱动选择：
    示例程序
    用户从键盘输入一个字符。通过循环，该字符与表的每个表项进行比较。第一个匹配的查询值将会产生一个调用，
    调用对象是紧接在该查询值后面的过程偏移量。每个过程加载到 EDX 的偏移量都代表了一个不同的字符串，它将在循环中显示：
    ; 过程偏移量表          (ProcTble.asm)
    ; 本程序包含了过程偏移量表格
    ; 使用这个表执行间接过程调用
    INCLUDE Irvine32.inc
    .data
    CaseTable  BYTE   'A'                  ; 查询值
            DWORD   Process_A           ; 过程地址
            BYTE   'B'
            DWORD   Process_B
            BYTE   'C'
            DWORD   Process_C
            BYTE   'D'
            DWORD   Process_D
    NumberOfEntries = 4
    prompt BYTE "Press capital A,B,C,or D: ",0
    ;为每个过程定义一个单独的消息字串
    msgA BYTE "Process_A",0
    msgB BYTE "Process_B",0
    msgC BYTE "Process_C",0
    msgD BYTE "Process_D",0
    .code
    main PROC
        mov  edx,OFFSET prompt              ; 请求用户输入
        call WriteString
        call ReadChar                       ; 读取字符到AL
        mov  ebx,OFFSET CaseTable           ; 设 EBX 为表指针
        mov  ecx,NumberOfEntries            ; 循环计数器
    L1:
        cmp  al,[ebx]                       ; 出现匹配项?
        jne  L2                             ; 否: 继续
        call NEAR PTR [ebx + 1]             ; 是: 调用过程
    ;这个 CALL 指令调用过程，其地址保存在 EBX+1 指向的内存位置中，像这样的间接调用需要使用 NEAR PTR 运算符
        call WriteString                    ; 显示消息
        call Crlf
        jmp  L3                             ; 推出搜索
        add  ebx,5                          ; 指向下一个表项
        loop L1                             ; 重复直到 ECX = 0
    L3:
        exit
    main ENDP
    ;下面的每个过程向EDX加载不同字符串的偏移量
    Process_A PROC
        mov  edx,OFFSET msgA
        ret
    Process_A ENDP
    Process_B PROC
        mov  edx,OFFSET msgB
        ret
    Process_B ENDP
    Process_C PROC
        mov  edx,OFFSET msgC
        ret
    Process_C ENDP
    Process_D PROC
        mov  edx,OFFSET msgD
        ret
    Process_D ENDP
    END main
    表驱动选择有一些初始化开销，但是它能减少编写的代码总量。一个表就可以处理大量的比较，并且与一长串的比较、跳转和 CALL 指令序列相比，它更加容易修改。甚至在运行时，表还可以重新配置。


