1. 32位寄存器概述（16个）：
    4个数据（通用）寄存器：(EAX、EBX、ECX、EDX)。
    6个段寄存器：（ES、CS、SS、DS、FS、GS）。
    2个变址寄存器：（ESI、EDI）。
    2个指针寄存器（ESP、EBP）。
    1个指令指针寄存器：EIP。
    1个标志寄存器:  EFlags。

2.64位寄存器分配的不同
    64位有16个寄存器，32位只有8个。但是32位前8个都有不同的命名，分别是e _ ，而64位前8个使用了r代替e，也就是r _。e开头的寄存器命名依然可以直接运用于相应寄存器的低32位。
    而剩下的寄存器名则是从r8 - r15，其低位分别用d，w,b指定长度。
    32位使用栈帧来作为传递的参数的保存位置，而64位使用寄存器，分别用rdi,rsi,rdx,rcx,r8,r9作为第1-6个参数。rax作为返回值
    64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，rbp作为通用寄存器使用
    64位支持一些形式的以PC相关的寻址，而32位只有在jmp的时候才会用到这种寻址方式。

3.间接寻址
    直接寻址很少用于数组处理，因为，用常数偏移量来寻址多个数组元素时，直接寻址不实用。反之，会用寄存器作为指针（称为间接寻址）并控制该寄存器的值。
    如果一个操作数使用的是间接寻址，就称之为间接操作数。

    间接操作数：
        保护模式
        任何一个 32 位通用寄存器（EAX、EBX、ECX、EDX、ESI、EDI、EBP 和 ESP）加上括号就能构成一个间接操作数。

        寄存器中存放的是数据的地址。示例如下，ESI 存放的是 byteVal 的偏移量，MOV 指令使用间接操作数作为源操作数，
        解析 ESI 中的偏移量，并将一个字节送入 AL：
        .data
        byteVal BYTE 10h
        .code
        mov esi,OFFSET byteVal
        mov al,[esi]                              ; AL = 10h
        如果目的操作数也是间接操作数，那么新值将存入由寄存器提供地址的内存位置。在下面的例子中，BL 寄存器的内容复制到 ESI 寻址的内存地址中：
        纯文本复制
        mov [esi],bl

        